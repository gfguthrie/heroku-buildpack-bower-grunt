#!/usr/bin/env bash
# See README.md for info on running these tests.

testDetectWithPackageJson() {
  detect "stable-node"
  assertCaptured "Node.js"
  assertCapturedSuccess
}

testDetectWithoutPackageJson() {
  detect "no-package-json"
  assertCapturedError 1 ""
}

testBadJson() {
  compile "bad-json"
  assertCaptured "Build failed"
  assertCaptured "We're sorry this build is failing"
  assertNotCaptured "build directory..."
  assertNotCaptured "Installing binaries"
  assertCapturedError 1 "Unable to parse"
}

testIoJs() {
  compile "iojs"
  assertCaptured "Node engine:         1.0."
  assertCaptured "(iojs)"
  assertCaptured "detected node version: v1.0."
  assertCapturedSuccess
}

testNoVersion() {
  compile "no-version"
  assertCaptured "Node engine:         unspecified"
  assertCaptured "WARNING: Node version not specified in package.json"
  assertCaptured "Resolving node version (latest stable) via semver.io"
  assertCaptured "Downloading and installing node 0.12"
  assertNotCaptured "We're sorry this build is failing"
  assertCapturedSuccess
}

testSpecificVersion() {
  compile "specific-version"
  assertNotCaptured "Resolving node version"
  assertCaptured "Downloading and installing node 0.10.29"
  assertCaptured "Using default npm version: 1.4.14"
  assertNotCaptured "We're sorry this build is failing"
  assertCapturedSuccess
}

testStableVersion() {
  compile "stable-node"
  assertCaptured "Downloading and installing node 0.10"
  assertNotCaptured "We're sorry this build is failing"
  assertCapturedSuccess
}

testOldNpm() {
  compile "old-npm"
  assertCaptured "WARNING: This version of npm (1.2.8000) has several known issues - consider upgrading to the latest release (2."
  assertNotCaptured "integer expression expected"
  assertCapturedSuccess
}

testNonexistentNpm() {
  compile "nonexistent-npm"
  assertCaptured "version not found: npm@1.1.65"
  assertCapturedError 1 ""
}

testSameNpm() {
  compile "same-npm"
  assertCaptured "npm 1.4.28 already installed"
  assertCapturedSuccess
}

testNpmVersionRange() {
  compile "npm-version-range"
  assertCaptured "Resolving npm version"
  assertCaptured "installing npm 1.4."
  assertCapturedSuccess
}

testNpmVersionSpecific() {
  compile "npm-version-specific"
  assertCaptured "installing npm 2.1.11"
  assertNotCaptured "Resolving npm version"
  assertNotCaptured "WARNING"
  assertCapturedSuccess
}

testDangerousRangeStar() {
  compile "dangerous-range-star"
  assertCaptured "WARNING: Avoid semver ranges like '*'"
  assertCaptured "Node engine:         *"
  assertCaptured "Resolving node version * via semver.io"
  assertCaptured "Downloading and installing node 0.12"
  assertCapturedSuccess
}

testDangerousRangeGreaterThan() {
  compile "dangerous-range-greater-than"
  assertCaptured "WARNING: Avoid semver ranges starting with '>'"
  assertCaptured "Resolving node version >0.4 via semver.io"
  assertCaptured "Downloading and installing node 0.12"
  assertCapturedSuccess
}

testRangeWithSpace() {
  compile "range-with-space"
  assertCaptured "Resolving node version >= 0.8.x via semver.io"
  assertCaptured "Downloading and installing node 0.12"
  assertCapturedSuccess
}

testInvalidDependency() {
  compile "invalid-dependency"
  assertCaptured "npm ERR! 404"
  assertCapturedError 1 ""
}

testUserConfig() {
  compile "userconfig"
  assertCaptured "www.google.com"
  assertCaptured "registry error"
  assertCapturedError 1 ""
}

testEnvVars() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "stable-node" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_PRODUCTION=false"
  assertCapturedSuccess
}

testNoEnvVars() {
  env_dir=$(mktmpdir)
  compile "stable-node" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_PRODUCTION=true"
  assertCapturedSuccess
}

testNonFileEnvVars() {
  export NPM_CONFIG_FOO=bar
  export NPM_CONFIG_PRODUCTION=false
  compile "stable-node"
  assertCaptured "NPM_CONFIG_FOO=bar"
  assertCaptured "NPM_CONFIG_PRODUCTION=false"
  assertCapturedSuccess
  unset NPM_CONFIG_FOO
  unset NPM_CONFIG_PRODUCTION
}

testDevDependencies() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "dev-dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "lodash"
  assertCapturedSuccess
}

testOptionalDependencies() {
  env_dir=$(mktmpdir)
  #echo "true" > $env_dir/NPM_CONFIG_OPTIONAL
  compile "optional-dependencies" "$(mktmpdir)" $env_dir
  assertNotCaptured "NPM_CONFIG_OPTIONAL"
  assertCaptured "less"
  assertCaptured "mime"
  assertCaptured "mkdirp"
  assertCaptured "clean-css"
  assertCaptured "request"
  assertCapturedSuccess
}

testNoOptionalDependencies() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_OPTIONAL
  compile "optional-dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_OPTIONAL=false"
  assertCaptured "less"
  assertNotCaptured "mime"
  assertNotCaptured "mkdirp"
  assertNotCaptured "clean-css"
  assertNotCaptured "request"
  assertCapturedSuccess
}

testShrinkwrap() {
  compile "shrinkwrap"
  assertCaptured "express@4.10.4"
  assertCaptured "lodash@2.4.0"
  assertCapturedSuccess
}


# Utils

pushd $(dirname 0) >/dev/null
bp_dir=$(pwd)
popd >/dev/null

source ${bp_dir}/test/utils

mktmpdir() {
  dir=$(mktemp -t testXXXXX)
  rm -rf $dir
  mkdir $dir
  echo $dir
}

detect() {
  capture ${bp_dir}/bin/detect ${bp_dir}/test/fixtures/$1
}

compile_dir=""

compile() {
  compile_dir=$(mktmpdir)
  cp -r ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

assertFile() {
  assertEquals "$1" "$(cat ${compile_dir}/$2)"
}

source ${bp_dir}/test/shunit2
